@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Formula.Core

<Datasheet Sheet="_sheet"/>

<textarea spellcheck="false" readonly="true" style="width: 500px; height: 500px;margin-top: 4px" @bind="_log"></textarea>

@code {

    private string _log = string.Empty;
    private Sheet _sheet = null!;

    protected override void OnInitialized()
    {
        _sheet = new Sheet(10, 5);

        _sheet.RangeSorted += (_, args) => Log($"RangeSorted {args.Region} old indicies {string.Join(",", args.OldIndicies)}");
        _sheet.BeforeRangeSort += (_, args) => Log($"BeforeRangeSort {args.Region} cancel {args.Cancel}");
        _sheet.Columns.Removed += (_, args) => Log($"{args.Count} columns removed from {args.Index}");
        _sheet.Columns.Inserted += (_, args) => Log($"{args.Count} columns inserted at {args.Index}");
        _sheet.Rows.Removed += (_, args) => Log($"{args.Count} rows removed from {args.Index}");
        _sheet.Rows.Inserted += (_, args) => Log($"{args.Count} rows inserted at {args.Index}");
        _sheet.Columns.SizeModified += (_, args) => Log($"Columns {args.IndexStart} to {args.IndexEnd} size changed");
        _sheet.Rows.SizeModified += (_, args) => Log($"Rows {args.IndexStart} to {args.IndexEnd} size changed");
        _sheet.Cells.CellsChanged += (_, args) => Log($"{string.Join(",", args.Positions)} positions changed, {string.Join(",", args.Regions)} changed");
        _sheet.Cells.FormatChanged += (_, args) => Log($"Format changed {args.Region}");
        _sheet.Cells.FormulaChanged += (_, args) => Log($"Formula changed at ({args.Row}, {args.Col} from {args.OldFormula?.ToFormulaString()} to {args.NewFormula?.ToFormulaString()})");
        _sheet.Cells.RegionMerged += (_, region) => Log($"Region merged at {region}");
        _sheet.Cells.MetaDataChanged += (_, args) => Log($"Meta data {args.Name} changed at ({args.Row}, {args.Col}) from {args.OldValue} to {args.NewValue}");
        _sheet.Cells.RegionUnMerged += (_, region) => Log($"Region unmerged at {region}");
        _sheet.Cells.BeforeCellValueConversion += (_, args) => Log($"BeforeCellValue conversion at ({args.Row}, {args.Column}). Type is {args.CellType}. New value is {args.NewValue.Data} from {args.OriginalValue}");
        _sheet.Commands.CommandRun += (_, args) => Log($"Command run {args.Command}");
        _sheet.Commands.CommandUndone += (_, args) => Log($"Command undone {args.Command}");
        _sheet.Selection.SelectingChanged += (_, region) => Log($"Selecting changed {region}");
        _sheet.Selection.SelectionChanged += (_, region) => Log($"Selected changed {region}");
        _sheet.Selection.CellsSelected += (_, args) => Log($"Cells selected {args.Cells.Count()} cells");
        _sheet.Validators.ValidatorChanged += (_, args) => Log($"Validator changed");
        _sheet.Editor.EditBegin += (_, args) => Log($"Edit begin at {RangeText.ToCellText(args.Cell.Row, args.Cell.Col)}. Mode: {args.Mode}. Type: {args.Type}. Value: {args.EditValue}. Soft edit: {args.IsSoftEdit}. Key: {args.Key}");
        _sheet.Editor.EditValueChanged += (_, s) => Log($"Edit value changed to {s}");
        _sheet.Editor.EditAccepted += (_, args) => Log($"Edit accepted {args.Value.Data}. Formula: {args.Formula}");
        _sheet.Editor.EditCancelled += (_, args) => Log($"Edit cancelled {args.Row}, {args.Col}.");
        _sheet.Editor.InvalidEdit += (_, args) => Log($"Invalid edit {args.Message}, value {args.EditValue}");
        _sheet.Editor.BeforeEditAccepted += (_, args) => Log($"Before edit accepted {args.EditValue}. Formula: {args.FormulaString}");
        _sheet.Editor.BeforeCellEdit += (_, args) => Log($"Before edit at {RangeText.ToCellText(args.Cell.Row, args.Cell.Col)}");
    }

    private void Log(string line)
    {
        _log += line + '\n';
        StateHasChanged();
    }

}